name: Python script testing


on:
  push:
    branches:
      - feature/python-script
  workflow_dispatch:
  

env:
  WERF_CHANNEL: "ea"

jobs:

  job1:
    name: Generate channel releases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check runner fs structure
        run: |
          echo "Current dir" && pwd
          echo "Check files" && ls -lah

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: pip install ghapi fastcore

      - name: Prepare files for collecting and deployment
        run: |
          mkdir -p ci/.helm/templates
          echo -e "project: deckhouse-channels\nconfigVersion: 1" | tee werf.yaml ci/werf.yaml
          echo "Print content of ci/werf.yaml" && cat ci/werf.yaml
          tee ci/.helm/templates/configmap.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: release-channels-data
          data:
            channels.yaml: |
          {{ $.Files.Get "channels.yaml" | indent 4 }}
          EOF

          echo "Print content of ci/.helm/templates/configmap.yaml" && cat ci/.helm/templates/configmap.yaml
      
      - name: Collect release versions
        run: python collect-released-versions.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: channels-artifact
          path: |
            ci
            ci/.helm
            ci/.helm/templates

  # job2:
  #   name: Deploy channel releases
  #   runs-on: ubuntu-latest
  #   needs: job1
      
  #   steps:

  #     - name: Download channels artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: channels-artifact

  #     - name: Install werf CLI  
  #       uses: werf/actions/install@v2

  #     - name: Converge
  #       uses: werf/actions/converge@v2
  #       with:
  #         channel: ${{env.WERF_CHANNEL}}
  #         kube-config-base64-data: "${{ secrets.WERF_KUBECONFIG_BASE64 }}"
  #         env: dev
  #       env:
  #         WERF_NAMESPACE: "deckhouse-web-dev"
  #         WERF_DIR: "ci"
  #         WERF_DEV: "true"